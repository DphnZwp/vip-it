<<<<<<< HEAD
import { Filter } from './filter';
import { Expression } from '../render';
import type { Liquid } from '../liquid';
import type { Context } from '../context';
export declare class Value {
    readonly filters: Filter[];
    readonly initial: Expression;
    /**
     * @param str the value to be valuated, eg.: "foobar" | truncate: 3
     */
    constructor(str: string, liquid: Liquid);
    value(ctx: Context, lenient?: boolean): Generator<unknown, unknown, unknown>;
    private getFilter;
}
=======
import { Filter } from './filter';
import { Expression } from '../render';
import type { Liquid } from '../liquid';
import type { Context } from '../context';
export declare class Value {
    readonly filters: Filter[];
    readonly initial: Expression;
    /**
     * @param str the value to be valuated, eg.: "foobar" | truncate: 3
     */
    constructor(str: string, liquid: Liquid);
    value(ctx: Context, lenient?: boolean): Generator<unknown, unknown, unknown>;
    private getFilter;
}
>>>>>>> 7fc95c6a4e4164a2677891ece3ea06752e5839e7
